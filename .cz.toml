[tool.commitizen]
use_shortcuts = true
tag_format="v$version"
# name = "cz_customize"

[tool.commitizen.customize]
# From: commitizen/defaults.py & commitizen/cz/conventional_commits/conventional_commits.py

message_template = "{{prefix}}{% if scope %}({{scope}}){% endif %}: {{subject}}{% if body %}\n\n{{body}}{% endif %}{% if footer %}\n\n{% if is_breaking_change %}BREAKING CHANGE: {% endif %}{{footer}}{% endif %}"

example = "fix: correct minor typos in code\n\nsee the issue for details on the typos fixed\n\ncloses issue #12"
schema = "<type>(<scope>): <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n(BREAKING CHANGE: )<footer>"
schema_pattern = "(?s)(build|ci|docs|feat|fix|perf|refactor|style|test|chore|revert|bump)(\\(\\S+\\))?!?:( [^\\n\\r]+)((\\n\\n.*)|(\\s*))?$"

bump_pattern = "^((BREAKING[\\-\\ ]CHANGE|\\w+)(\\(.+\\))?!?):"
bump_map = {"^.+!$"= "MAJOR", "^BREAKING[\\-\\ ]CHANGE"= "MAJOR", "^feat"= "MINOR", "^fix"= "PATCH", "^refactor"= "PATCH", "^perf"= "PATCH"}

change_type_order = ["BREAKING CHANGE", "Feat", "Fix", "Refactor", "Perf"]
info_path = "cz_customize_info.txt"
info = """
This is customized info
"""
commit_parser = "^((?P<change_type>feat|fix|refactor|perf|BREAKING CHANGE)(?:\\((?P<scope>[^()\\r\\n]*)\\)|\\()?(?P<breaking>!)?|\\w+!):\\s(?P<message>.*)?"
changelog_pattern = "^(feature|bug fix)?(!)?"
change_type_map = {"feat"="Feat", "fix"="Fix", "refactor"="Refactor", "perf"="Perf"}



[[tool.commitizen.customize.questions]]
type= "list"
name= "prefix"
message= "Select the type of change you are committing"
choices= [{"value"= "fix", "name"= "fix: A bug fix. Correlates with PATCH in SemVer", "key"= "x"}, {"value"= "feat", "name"= "feat: A new feature. Correlates with MINOR in SemVer", "key"= "f"}, { "value"= "docs", "name"= "docs: Documentation only changes", "key"= "d"}, { "value"= "style", "name"= "style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)", "key"= "s"}, { "value"= "refactor", "name"= "refactor: A code change that neither fixes a bug nor adds a feature", "key"= "r"}, { "value"= "perf", "name"= "perf: A code change that improves performance", "key"= "p"}, { "value"= "test", "name"= "test: Adding missing or correcting existing tests", "key"= "t"}, { "value"= "build", "name"= "build: Changes that affect the build system or external dependencies (example scopes: pip, docker, npm)", "key"= "b"}, { "value"= "ci", "name"= "ci: Changes to CI configuration files and scripts (example scopes: GitLabCI)", "key"= "c"}, { "value"= "chore", "name"= "chore: Administrative or supportive tasks that do not impact production code", "key"= "o"}, { "value"= "revert", "name"= "revert: Roll back a previous commit", "key"= "v"}]



[[tool.commitizen.customize.questions]]
type= "input"
name= "scope"
message= "What is the scope of this change? (class or file name): (press [enter] to skip)\n"
# filter= "parse_scope"
# filter= "commitizen.cz.conventional_commits.conventional_commits.parse_scope"
# filter= 'def parse_scope(text):\n\tif not text:\n\t\treturn ""\n\n\tscope = text.strip().split()\n\tif len(scope) == 1:\n\t\treturn scope[0]\n\n\treturn "-".join(scope)'
# filter= "lambda x: x"

[[tool.commitizen.customize.questions]]
type= "input"
name= "subject"
message= "Write a short and imperative summary of the code changes: (lower case and no period)\n"
# filter= "commitizen.cz.conventional_commits.conventional_commits.parse_subject"



[[tool.commitizen.customize.questions]]
type= "input"
name= "body"
message= "Provide additional contextual information about the code changes: (press [enter] to skip)\n"
# filter= "commitizen.cz.utils.multiple_line_breaker"



[[tool.commitizen.customize.questions]]
type= "confirm"
name= "is_breaking_change"
message= "Is this a BREAKING CHANGE? Correlates with MAJOR in SemVer"
default= false


[[tool.commitizen.customize.questions]]
type= "input"
name= "footer"
message= "Footer. Information about Breaking Changes and reference issues that this commit closes: (press [enter] to skip)\n"




# [[tool.commitizen.customize.questions]]
# type=
# name=
# message=
# choices=
# default=
# filter=
# multiline=